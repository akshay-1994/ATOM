using AurigoTest.Toolkit.Common;
using AurigoTest.Toolkit.Core;
using AurigoTest.Toolkit.MW;
using ModuleXYZ_TestSuite;
using ModuleXYZ_TestSuite.AutoGenTests;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DemoInConsole.Samples
{
    class SecurityServerSideValidation
    {
        const string DEFAULT_USER_NAME = "administrator";
        const string DEFAULT_USER_PWD = "aurigo";
        TC nn = new TC();

        string serverSideValidationMessage = "Cannot save the data. Invalid data.";

        public void Open(string testId, string testSummary)
        {
            TestScenarioConfig config = null;

            config = new TestScenarioConfig()
            {
                IsSaveWillSucceed = false, // { isSaveWillSucceed };
                //AutomationGUID_FieldName = this.AutomationGUID_FieldName,// { AutomationGUID_FieldName };
                IsVerificationRequired_InDatabase = true, // { IsDatabaseVerificationRequired };
                //VerificationDescriptionText = "Verify UserDirectoryModule in DB",// { VerificationDescriptionText };
                IsVerificationRequired_InEditMode = true,
                IsVerificationRequired_InViewMode = true,
            };

            var listpage = MasterworksScreen.Begin(testId, testSummary, BrowserType.Chrome, false)
                                          .Login(AurigoAppSettings.AutoLogin_UserName, AurigoAppSettings.AutoLogin_Password)
                                          .OpenEnterprise_Form_ByDisplayName("Security Form 002");

            var formPage = listpage.OpenCreateRecordForm();

            string originalText = formPage.GetTextbox("Username");
            string originalId = formPage.GetTextbox("UserID");

            formPage.SetTextbox("Username", "Hacker");
            formPage.SetTextbox("UserID", 10032);

            if (config.IsSaveWillSucceed)
                listpage = formPage.SaveForm_Successfully();
            else
                formPage = formPage.SaveForm_ExpectValidationError();

            
            #region If verification required by editing the record
            if (config.IsSaveWillSucceed && config.IsVerificationRequired_InEditMode)
            {
                Action<GenericFormPageVerifier> formPageVerifier = (v) =>
                {
                    #region AutoGenerated Assert In formVerifier
                    v.AssertToasterMessage(serverSideValidationMessage);
                    v.AssertTextbox("Username", originalText);
                    v.AssertTextbox("UserId", originalId);

                    #endregion AutoGenerated Assert In formVerifier
                };

                Action<string, GenericListPage> formVerificationHandler = (id, listPageRef) =>
                {
                    var form = listPageRef.EditRow_WithId_ByNavigationUrl(id);

                    form.BeginVerification(config.VerificationDescriptionText, formPageVerifier);
                };

                if (!(config.IsAutomationGUID_Field_Defined))
                    listpage = listpage.ExecuteCustom_Using_LastId("XF134Master", "ID", formVerificationHandler);
                else
                {
                    var hintObject = nn.GetTableRecordHintObject(config.AutomationGUID_FieldValue);
                    listpage = listpage.ExecuteCustom_Using_LastId(hintObject, formVerificationHandler);
                }

            }

            #endregion If verification required by editing the record

            #region If verification required by editing the record
            if (!config.IsSaveWillSucceed)
            {
                Action<GenericFormPageVerifier> formPageVerifier = (v) =>
                {
                    #region AutoGenerated Assert In formVerifier
                    v.AssertToasterMessage(serverSideValidationMessage);
                   // v.AssertTextbox("Username", originalText);
                   // v.AssertTextbox("UserId", originalId);

                    #endregion AutoGenerated Assert In formVerifier
                };

                formPage.BeginVerification(config.VerificationDescriptionText, formPageVerifier);
            }

            #endregion If verification required by editing the record


            listpage.End_Automation();



            }
        
        }
    }
