// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Aurigo.Atom.Generator.Core.CodeGenTemplates.VSTemplates
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class ProjectXmlFileTemplate : ProjectXmlFileTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"<?xml version=""1.0"" encoding=""utf-8""?>
<Project ToolsVersion=""14.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
  <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"" />

  <PropertyGroup>
    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>
    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>
    <ProjectGuid>
      {");
            
            #line 13 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.ProjectGuid));
            
            #line default
            #line hidden
            this.Write("}\r\n      </ProjectGuid>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFo" +
                    "lder>Properties</AppDesignerFolder>\r\n    <RootNamespace>");
            
            #line 17 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.RootNamespace));
            
            #line default
            #line hidden
            this.Write("</RootNamespace>\r\n    <AssemblyName>");
            
            #line 18 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.AssemblyName));
            
            #line default
            #line hidden
            this.Write("</AssemblyName>\r\n    <TargetFrameworkVersion>");
            
            #line 19 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.TargetFrameworkVersion));
            
            #line default
            #line hidden
            this.Write(@"</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
   <ItemGroup>
    <Reference Include=""System"" />
     <Reference Include=""System.Core"" />
     <Reference Include=""System.Configuration"" />
    <Reference Include=""System.Drawing"" />
    <Reference Include=""System.Xml.Linq"" />
    <Reference Include=""System.Data.DataSetExtensions"" />
    <Reference Include=""Microsoft.CSharp"" />
    <Reference Include=""System.Data"" />
    <Reference Include=""System.Net.Http"" />
    <Reference Include=""System.Xml"" />
    <Reference Include=""WebDriver, Version=3.11.2.0, Culture=neutral, processorArchitecture=MSIL"">
      <HintPath>");
            
            #line 52 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.SharedLibraryPath));
            
            #line default
            #line hidden
            this.Write("\\WebDriver.dll</HintPath>\r\n      <Private>True</Private>\r\n    </Reference>\r\n    <" +
                    "Reference Include=\"WebDriver.Support, Version=3.11.2.0, Culture=neutral, process" +
                    "orArchitecture=MSIL\">\r\n      <HintPath>");
            
            #line 56 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.SharedLibraryPath));
            
            #line default
            #line hidden
            this.Write("\\WebDriver.Support.dll</HintPath>\r\n      <Private>True</Private>\r\n    </Reference" +
                    ">\r\n\t<Reference Include=\"AurigoTest.Toolkit\">\r\n      <HintPath>");
            
            #line 60 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.SharedLibraryPath));
            
            #line default
            #line hidden
            this.Write("\\AurigoTest.Toolkit.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"New" +
                    "tonsoft.Json\">\r\n      <HintPath>");
            
            #line 63 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.SharedLibraryPath));
            
            #line default
            #line hidden
            this.Write("\\Newtonsoft.Json.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Releva" +
                    "ntCodes.ExtentReports\">\r\n      <HintPath>");
            
            #line 66 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.SharedLibraryPath));
            
            #line default
            #line hidden
            this.Write(@"\RelevantCodes.ExtentReports.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
	<Compile Include=""Properties\AssemblyInfo.cs"" />
    <Compile Include=""TestScenarioConfig.cs"" />
    <Compile Include=""MasterRunner_AutoGenTests.cs"" />
	<Compile Include=""MasterRunner_UserTests.cs"" />
	<Compile Include=""AutoGenTests\TC._.cs"" />
");
            
            #line 75 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
 foreach( var item in GeneratorProjectXmlFile.ScenarioFileObjectList) {  
            
            #line default
            #line hidden
            this.Write("  \r\n    <Compile Include=\"AutoGenTests\\TC.");
            
            #line 76 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ScenarioFunctionName));
            
            #line default
            #line hidden
            this.Write(".cs\" />\r\n");
            
            #line 77 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
  }  
            
            #line default
            #line hidden
            this.Write("  </ItemGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"UserTests\\\" />\r\n  </ItemGroup" +
                    ">\r\n  <ItemGroup>\r\n    <Content Include=\"");
            
            #line 83 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.ModuleXmlName));
            
            #line default
            #line hidden
            this.Write("\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </Content>\r\n" +
                    "  </ItemGroup>\r\n  <ItemGroup>\r\n    <None Include=\"");
            
            #line 88 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorProjectXmlFile.AssemblyName));
            
            #line default
            #line hidden
            this.Write(@"_App.config"" />
  </ItemGroup>
  <Import Project=""$(MSBuildToolsPath)\Microsoft.CSharp.targets"" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name=""BeforeBuild"">
  </Target>
  <Target Name=""AfterBuild"">
  </Target>
  -->
</Project>");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\TFS\Hackathon2018_ATOM\Aurigo.Atom.Generator.Core\CodeGenTemplates\VSTemplates\ProjectXmlFileTemplate.tt"

private global::Aurigo.Atom.Generator.Core.CodeGenObjects.VSTemplates.GeneratorProjectXmlFile _GeneratorProjectXmlFileField;

/// <summary>
/// Access the GeneratorProjectXmlFile parameter of the template.
/// </summary>
private global::Aurigo.Atom.Generator.Core.CodeGenObjects.VSTemplates.GeneratorProjectXmlFile GeneratorProjectXmlFile
{
    get
    {
        return this._GeneratorProjectXmlFileField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool GeneratorProjectXmlFileValueAcquired = false;
if (this.Session.ContainsKey("GeneratorProjectXmlFile"))
{
    this._GeneratorProjectXmlFileField = ((global::Aurigo.Atom.Generator.Core.CodeGenObjects.VSTemplates.GeneratorProjectXmlFile)(this.Session["GeneratorProjectXmlFile"]));
    GeneratorProjectXmlFileValueAcquired = true;
}
if ((GeneratorProjectXmlFileValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("GeneratorProjectXmlFile");
    if ((data != null))
    {
        this._GeneratorProjectXmlFileField = ((global::Aurigo.Atom.Generator.Core.CodeGenObjects.VSTemplates.GeneratorProjectXmlFile)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class ProjectXmlFileTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
