<#@ template language="C#" #>
<#@ parameter 
	name="GeneratorMasterRunner_AutoGenTests" 
	type="Aurigo.Atom.Generator.Core.CodeGenObjects.BasicTemplate.GeneratorMasterRunner_AutoGenTests" #>


using AurigoTest.Toolkit;
using AurigoTest.Toolkit.Core;
using <#= GeneratorMasterRunner_AutoGenTests.ModuleId #>_TestSuite.AutoGenTests;
using System;
using System.Collections.Generic;

namespace <#= GeneratorMasterRunner_AutoGenTests.AutoGeneratedProjectNamespace #>
{
    public class MasterRunner_AutoGenTests : ITestSuiteBase
    {
        public string SuiteName { get { return "<#= GeneratorMasterRunner_AutoGenTests.SuiteName #>"; } }

        public void RunTest(List<string> testMethodsToRun = null)
        {
            TC tc = new TC();

            List<Action<string, string>> testMethodChain = new List<Action<string, string>>();

            foreach (var methodName in testMethodsToRun)
            {
                var methodRef = GetMethodReference(methodName, ref tc);
                if (methodRef != null)
                    testMethodChain.Add(methodRef);
            }

            var testRunDescription = "ALL";

            if (testMethodsToRun == null)
                testMethodChain = GetAllMethodReference(ref tc);
            else
                testRunDescription = string.Join(",", testMethodsToRun);

			try
			{
	            TestRunner.RunWithDesc("<#= GeneratorMasterRunner_AutoGenTests.SuiteName #>", "Running: " + testRunDescription, testMethodChain, tc);
			}
			catch(Exception e)
			{
			}
			finally
            {
                Helpers.Report.Close(); //THIS HAS TO BE DONE so report is created

                if (System.IO.File.Exists(Helpers.ReportFileFullPath))
                    System.Diagnostics.Process.Start(Helpers.ReportFileFullPath);
            } 
        }

        protected Action<string, string> GetMethodReference(string methodName, ref TC tc)
        {
            switch (methodName)
            {
			<# foreach( var item in GeneratorMasterRunner_AutoGenTests.ComputedList_For_ScenarioMethod) {  #>
				case "<#= item  #>": return tc.<#= item  #>;
			<#  }  #>
            }
            return null;
        }

        protected List<Action<string, string>> GetAllMethodReference(ref TC tc)
        {
            List<Action<string, string>> testMethodChain = new List<Action<string, string>>();

			<# foreach( var item in GeneratorMasterRunner_AutoGenTests.ComputedList_For_ScenarioMethod) {  #>
				testMethodChain.Add(tc.<#= item  #>);
			<#  }  #>

            return testMethodChain;
        }
    }
}
